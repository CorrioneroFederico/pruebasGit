init: crea el repo
add x: agrega archivos al staging
commit: agrega los archivos en el staging al repo
status: meutras estado de archivos (rojo en working directory - verde en staging)
show: muestra cambios historicos
log: muestra historial de commits con distintos datos
git push: enviar commits a github

(staging: en memoria, posteriormente pasa al repo)

Clase 12:
reset Y: vuelve a un estado Y
    --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging,
            así podemos aplicar las últimas actualizaciones a un nuevo commit.
    
    --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
    
    HEAD: Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso,
            solo para que los últimos cambios de estos archivos no se envíen al último commit,
            a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

    Es muy "peligroso" ya que borra todo lo hecho posteriormente desde el "commit" que se vuelve.
    Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver.
    Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

checkout Y: te mueves entre commits (checkout maseter: vuelve al ultimo commit hecho)

pull: es igual que "fetch" + "merge". Trae los cambios del repositorio remoto al directorio y repositorio locales.
push: envía los cambios al repositorio remoto.

Ramas:
branch: crea una rama a partir del lugar donde estoy parado (HEAD)
checkout Z: me muevo a la rama Z

X: archivo
Y: directorio o commit
Z: nombre rama

merge Z: el merge se debe realizar sobre la rama en la cual quiero traer los cambios a fusionar.
        por ejemplo, si estoy en master (rama principal), y quiero traer (fusionar) la "nueva_rama", solo hago un merge
        desde la rama donde estoy, y pongo la rama que quiero traer: "git merge nueva_rama" (con HEAD en master)

Conflictos:
cuando tengo conflictos durante el merge, debo solucionarlos, elijo la opcion de arriba (rama donde estoy parado) o la de abajo (los cambios de la otra rama),
que serian los q vienen.